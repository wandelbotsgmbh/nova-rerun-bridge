# <type>(<scope>): <short description>
# Example: feat(api): add user login endpoint

# Types:
# - feat: A new feature
# - fix: A bug fix
# - docs: Documentation changes
# - style: Code style changes (formatting, missing semi-colons, etc.)
# - refactor: Code changes that neither fix a bug nor add a feature
# - perf: Performance improvements
# - test: Adding or modifying tests
# - build: Changes related to build systems (e.g., Docker, npm)
# - ci: Continuous integration changes
# - chore: Maintenance or other changes that don't modify src or test files
# - revert: Reverts a previous commit

# Scope (optional):
# - Indicate what part of the codebase is affected, e.g., api, ui, config

# Short description:
# - Briefly describe the change (max 50 characters).
# - Use the imperative mood (e.g., "fix bug" instead of "fixed bug").

# Extended description (optional):
# - Provide additional context or reasoning behind the changes.
# - Explain how your change affects the overall codebase.
# - Reference any issues or tickets related to the change (if applicable).

# Footer (optional):
# - Use for breaking changes, closing issues, or linking tasks.
# - Example: BREAKING CHANGE: API response format updated.
# - Example: Closes #123, #456.

# --------------------
# After writing the commit message, you can save and exit.
#
# Please remove all lines starting with `#` before committing.
